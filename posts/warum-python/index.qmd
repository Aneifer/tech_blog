---
title: "Warum ich angefangen habe, Python zu lernen"
author: "Anna Neifer"
date: "2023-09-10"
categories: [Community, Python]
---

# Warum ich angefangen habe, Python zu lernen

Sprachen sind Schlüssel, mit denen sich Türen zu verborgenen Welten öffnen lassen. In meiner Arbeit als Journalistin, habe ich immer wieder an der Schnittstelle von Innovation, Recherche und Technologie gearbeitet. Und dabei bin ich an meine Grenzen gestoßen. Deswegen habe ich mir zunächst nebenbei Python beigebracht. 
Es war im wahrsten Sinne des Wortes Code, den ich knacken wollte. Das ist der Ausgangspunkt meiner Reise gewesen, in die Welt von Objekten, Funktionen und Variablen.

## Interesse für Technologie

Technologie hat mich schon lange fasziniert: Die Möglichkeit, eigene digitale Ideen realisieren zu können und Probleme durch Code zu lösen. Als Data-Journalistin habe ich an investigativen Projekten gearbeitet, darunter die Recherche zum Attentäter von Henriette Reker oder das Projekt Tatort Rechts.
Mit Python habe ich Einblick in eine Sprache erlangt, die nicht nur in der Softwareentwicklung, sondern auch in der Datenanalyse und im Journalismus vielfältig einsetzbar ist. Die Verbindung von Code und investigativer Recherche eröffnet neue, spannende Möglichkeiten.

## Warum ich mich für Python entschieden habe

Ich habe mich intensiv mit verschiedenen Programmiersprachen beschäftigt und mich letztlich für Python entschieden. Das sind die Gründe:
- Lesbarkeit und Einfachheit: Python ist bekannt für seine klare und leicht verständliche Syntax. Der Code ist intuitiv und leicht zu verstehen, was besonders für Einsteiger attraktiv ist.
- Vielseitigkeit: Python findet Anwendung in Webentwicklung, Datenanalyse, künstlicher Intelligenz und vielem mehr. Diese Vielseitigkeit ermöglicht es, unterschiedlichste Projekte umzusetzen.
- Große Community: Eine aktive Gemeinschaft bedeutet viele Ressourcen und Unterstützung für Anfänger. Veranstaltungen wie die PyCon, die ich 2024 besucht habe, haben mir Gelegenheiten zum Austausch und zur Weiterbildung gegeben.
- Beliebtheit: Python gehört zu den beliebtesten Programmiersprachen weltweit, derzeit laut [TIOBE Index](https://www.tiobe.com/tiobe-index/) auf Platz 1.


![](24_Statista_Most used programming languages among developers worldwide as of 2024.png)

## Was ist Python?

Python ist eine universelle, höhere Programmiersprache, die Anfang der 1990er Jahre von Guido van Rossum entwickelt wurde. Sie zeichnet sich durch ihre einfache Syntax und Lesbarkeit aus. Python unterstützt mehrere Programmierparadigmen, darunter die objektorientierte, die aspektorientierte und die funktionale Programmierung.

### Besonderheiten von Python
- Einheitliche Formatierung: Anstelle von geschweiften Klammern oder Schlüsselwörtern zur Blockbildung setzt Python auf Einrückungen. Dies fördert einen übersichtlichen und gut lesbaren Code.
- Dynamische Typisierung: In Python müssen Variablen nicht explizit deklariert werden. Der Datentyp einer Variablen wird zur Laufzeit basierend auf dem zugewiesenen Wert bestimmt. Das bedeutet, dass man einer Variablen zunächst eine Zahl und später einen Text zuweisen kann, ohne einen Fehler zu verursachen. Diese Flexibilität beschleunigt die Entwicklung und macht den Code anpassungsfähiger.
- Umfangreiche Standardbibliothek: Python bietet eine breite Palette an Modulen und Bibliotheken für verschiedene Anwendungsbereiche, von Webentwicklung über Datenanalyse bis hin zu maschinellem Lernen.
- Plattformunabhängigkeit: Python-Programme können auf verschiedenen Betriebssystemen wie Windows, macOS und Linux ausgeführt werden, ohne Änderungen am Code vornehmen zu müssen.

## Programmierparadigmen in Python

Python unterstützt verschiedene Programmierparadigmen, die unterschiedliche Ansätze zur Strukturierung und Organisation von Code bieten:
- Objektorientierte Programmierung (OOP): In der OOP werden Programme in Objekte unterteilt, die sowohl Daten als auch die darauf operierenden Methoden kapseln. Dies fördert die Wiederverwendbarkeit und Modularität des Codes.
- Funktionale Programmierung: Dieser Ansatz betont die Verwendung von reinen Funktionen, die keine Seiteneffekte haben und den Programmzustand nicht verändern. Dies führt zu vorhersehbarem und leicht testbarem Code.
- Aspektorientierte Programmierung (AOP): AOP ermöglicht es, Querschnittsbelange wie Logging oder Fehlerbehandlung modular zu behandeln, ohne den Hauptcode zu verunreinigen.

## Projekte auf Github

Auf [Github](https://github.com/Aneifer) habe ich ein paar meiner Projekte hochgeladen. Schaut gern rein und lasst uns da vernetzen.



